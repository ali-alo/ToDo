// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoAPI.Data;

#nullable disable

namespace ToDoAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240223201843_Seed")]
    partial class Seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TagToDo", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<int>("ToDosId")
                        .HasColumnType("int");

                    b.HasKey("TagsId", "ToDosId");

                    b.HasIndex("ToDosId");

                    b.ToTable("TagToDo", (string)null);

                    b.HasData(
                        new
                        {
                            TagsId = 1,
                            ToDosId = 1
                        },
                        new
                        {
                            TagsId = 3,
                            ToDosId = 1
                        },
                        new
                        {
                            TagsId = 2,
                            ToDosId = 2
                        },
                        new
                        {
                            TagsId = 3,
                            ToDosId = 3
                        });
                });

            modelBuilder.Entity("ToDoAPI.Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Duolingo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coding"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Languages"
                        });
                });

            modelBuilder.Entity("ToDoAPI.Data.Models.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ToDos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            DueDate = new DateTime(2024, 2, 24, 20, 18, 43, 150, DateTimeKind.Utc).AddTicks(7561),
                            Priority = (byte)2,
                            Status = (byte)1,
                            Title = "Complete level 7 on Duolingo"
                        },
                        new
                        {
                            Id = 2,
                            CompletionDate = new DateTime(2024, 2, 23, 8, 18, 43, 150, DateTimeKind.Utc).AddTicks(7724),
                            Description = "At least one challenge must be level 5",
                            DueDate = new DateTime(2024, 2, 21, 23, 18, 43, 150, DateTimeKind.Utc).AddTicks(7718),
                            Priority = (byte)2,
                            Status = (byte)3,
                            Title = "Solve 5 Codewars challenges"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Finish week 2, day 6",
                            DueDate = new DateTime(2024, 2, 24, 6, 18, 43, 150, DateTimeKind.Utc).AddTicks(7875),
                            Priority = (byte)2,
                            Status = (byte)2,
                            Title = "TTMIK weekly vocab"
                        });
                });

            modelBuilder.Entity("TagToDo", b =>
                {
                    b.HasOne("ToDoAPI.Data.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoAPI.Data.Models.ToDo", null)
                        .WithMany()
                        .HasForeignKey("ToDosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
